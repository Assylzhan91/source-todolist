{"version":3,"sources":["Todo/TodoItem/todo-item.module.css","App.module.css","context/index.js","Todo/TodoItem/index.js","Todo/index.js","Preloader/index.js","Modal/index.js","AddTodo/index.js","App.js","index.js"],"names":["module","exports","Context","React","createContext","TodoItem","todoItem","idx","checkboxHandler","span","completed","push","cls","removeTodoItem","useContext","ListGroup","Item","variant","className","li","wrapper","input","type","onChange","id","checked","strong","join","title","Button","onClick","TodoList","todos","map","todo","key","props","ModalWindow","state","isOpened","handleClose","setState","handleShow","this","size","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Component","AddTodo","AddTodoItem","defalutValue","showErr","useState","value","setValue","showErrState","setShowErr","e","inp","target","length","clear","useInputValue","Form","onSubmit","preventDefault","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","disabled","Text","App","todosState","setTodos","preloader","setPreloader","filter","useEffect","fetch","then","response","json","setTimeout","Provider","concat","trim","Date","now","app","mainTitle","Preloader","center","Todo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.759da0c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"_li--1d9SV-\",\"input\":\"_input--2AV7k8\",\"strong\":\"_strong--U9RjD7\",\"span\":\"_span--2z7VQr\",\"wrapper\":\"_wrapper--HmYpTa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"_wrapper--2IARt5\",\"mainTitle\":\"_mainTitle--1rJTVt\",\"center\":\"_center--1bfk0M\",\"wrapper-center\":\"_wrapper-center--P3VrNH\",\"App-logo-spin\":\"_App-logo-spin--1Zcs7F\"};","import React from \"react\";\r\nexport const Context = React.createContext();\r\n","import React, {useContext} from 'react'\r\nimport { Button, ListGroup } from 'react-bootstrap'\r\nimport { Context } from '../../context'\r\nimport cls from \"./todo-item.module.css\"\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst TodoItem = ({todoItem, idx, checkboxHandler}) => {\r\n    let span = []\r\n\r\n    if(todoItem.completed){\r\n        span.push(cls.span)\r\n    }\r\n    const {removeTodoItem } =  useContext(Context)\r\n    return (\r\n\r\n        <ListGroup.Item variant=\"success mb-4\" className={cls.li}>\r\n            <p className={cls.wrapper}>\r\n                <input className={cls.input}\r\n                       type=\"checkbox\"\r\n                       onChange={()=>checkboxHandler(todoItem.id)}\r\n                       checked={todoItem.completed}\r\n                />\r\n                  <strong className={cls.strong}>{idx+1}. </strong>\r\n                <span className={span.join(' ')}>{todoItem.title}</span>\r\n            </p>\r\n\r\n            <Button variant=\"warning\"\r\n                    onClick={()=>removeTodoItem(todoItem.id)}\r\n                >&times;</Button>\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todoItem: PropTypes.object.isRequired,\r\n    idx: PropTypes.number.isRequired,\r\n    checkboxHandler: PropTypes.func.isRequired,\r\n\r\n}\r\nexport default TodoItem\r\n","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\n\r\nconst TodoList =({todos, checkboxHandler}) => {\r\n\r\n    return (\r\n        <ListGroup >\r\n        {\r\n            todos.map((todo, idx)=>{\r\n                return (\r\n                    <TodoItem\r\n                        todoItem={todo}\r\n                        key={todo.id}\r\n                        idx={idx}\r\n                        checkboxHandler={checkboxHandler}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object),\r\n    checkboxHandler: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\nimport \"./classes.css\"\r\nimport \"./classes.css\"\r\n\r\nexport default  props => {\r\n    return (\r\n        <div className=\"lds-spinner\">\r\n            <div/><div/>\r\n            <div/><div/>\r\n            <div/><div/>\r\n            <div/><div/>\r\n            <div/><div/>\r\n            <div/><div/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Button, Modal} from \"react-bootstrap\"\r\n\r\nclass ModalWindow extends Component {\r\n    state = {\r\n        isOpened: false\r\n    }\r\n\r\n     handleClose = () => {\r\n         this.setState({isOpened: false})\r\n     };\r\n    handleShow = () => {\r\n        this.setState({isOpened: true})\r\n    };\r\n\r\n  render() {\r\n      const {isOpened} = this.state\r\n    return (\r\n        <>\r\n            <Button variant=\"secondary mb-4\" size=\"lg\" onClick={this.handleShow}>\r\n                Button show Modal\r\n            </Button>\r\n\r\n            <Modal show={isOpened} onHide={this.handleClose} animation={true}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Modal heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={this.handleClose}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n  }\r\n}\r\nexport  default ModalWindow\r\n\r\n\r\n\r\n/*\r\nconst ModalWindow = props => {\r\n    const [show, setShow] = useState(true);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    return (\r\n        <>\r\n        <Button variant=\"secondary\" size=\"lg\">\r\n            Large button\r\n        </Button>\r\n\r\n        <Modal show={show} onHide={handleClose} animation={false}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Modal heading</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleClose}>\r\n                    Save Changes\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModalWindow\r\n*/\r\n","import React, {useContext, useState} from 'react'\r\nimport {Button, FormControl, InputGroup, Form} from \"react-bootstrap\";\r\nimport {Context} from \"../context\";\r\nimport \"./AddTodo.css\";\r\n\r\nfunction useInputValue(defalutValue = '', showErr) {\r\n    const [value, setValue] = useState(defalutValue)\r\n    const [showErrState, setShowErr] = useState(showErr)\r\n\r\n    return{\r\n        setValue: {\r\n            value,\r\n            showErrState,\r\n            onChange: e => {\r\n                let inp = e.target.value\r\n                inp.length >= 0 && inp.length < 4\r\n                ?   setShowErr(true)\r\n                :   setShowErr(false)\r\n\r\n                setValue(inp)\r\n\r\n            }\r\n        },\r\n        clear:  ()=> setValue(''),\r\n        get value (){\r\n            return  value\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst AddTodo = props => {\r\n    const { AddTodoItem } =  useContext(Context)\r\n\r\n    let {setValue, value, showErrState,  clear} = useInputValue('', false)\r\n\r\n    function addingTodo(){\r\n        AddTodoItem(value)\r\n        clear()\r\n    }\r\n\r\n\r\n    return (\r\n        <Form onSubmit={e =>e.preventDefault()} className='mb-4'>\r\n            <InputGroup>\r\n                <FormControl\r\n                    placeholder=\"Add an todo\"\r\n                    aria-label=\"Recipient's username\"\r\n                    aria-describedby=\"basic-addon2\"\r\n                   {...setValue}\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-secondary\"\r\n                            onClick={addingTodo}\r\n                            type=\"submit\"\r\n                            disabled={  value=== \"\"\r\n                                        ?  setValue.showErrState = true\r\n                                        :  setValue.showErrState\r\n                            }\r\n                            className={setValue.showErrState ?  'not-allow-btn' : null}\r\n                    >\r\n                        Button\r\n                    </Button>\r\n\r\n\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            {\r\n                value=== \"\"\r\n                ?   setValue.showErrState = true\r\n                : setValue.showErrState &&\r\n                    <Form.Text className=\"text-muted\">\r\n                        Enter 4 symbols or greater\r\n                    </Form.Text>\r\n            }\r\n        </Form>\r\n    )\r\n}\r\n\r\n/*AddTodo.propTypes = {\r\n    todoItem: PropTypes.func.isRequired\r\n}*/\r\n\r\nexport default AddTodo\r\n","import React, {useState, useEffect, lazy, Suspense} from 'react';\r\nimport TodoList from './Todo';\r\nimport Preloader from './Preloader/';\r\nimport Modal from './Modal';\r\nimport { Context } from './context';\r\nimport AddTodo from './AddTodo';\r\nimport app from './App.module.css';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const [todosState, setTodos] = useState([])\r\n    const [preloader, setPreloader] = useState(true)\r\n    useEffect(()=>{\r\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=4')\r\n            .then(response => response.json())\r\n            .then(todos => {\r\n                setTimeout(()=>{\r\n                    setTodos(todos)\r\n                    setPreloader(false)\r\n                }, 1000)\r\n             })\r\n\r\n    }, [])\r\n\r\n    function checkboxHandler(idx){\r\n        setTodos(\r\n            todosState.map(todo =>{\r\n                if(todo.id === idx){\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo\r\n            })\r\n        )\r\n     }\r\n\r\n    function removeTodoItem(idx){\r\n        setTodos(todosState.filter(({id})=>id !==idx))\r\n    }\r\n\r\n    function AddTodoItem(title){\r\n\r\n        setTodos(\r\n            todosState.concat([{\r\n                title: title.trim(),\r\n                completed: false,\r\n                id: Date.now()\r\n            }])\r\n        )\r\n    }\r\n\r\n  return (\r\n        <Context.Provider value={{removeTodoItem, AddTodoItem}}>\r\n            <div className={app.wrapper}>\r\n                <h1 className={app.mainTitle}>Todo list developed with hooks</h1>\r\n                <Modal/>\r\n\r\n                {\r\n                    preloader\r\n                    ?   <div className={app['wrapper-center']}><Preloader/></div>\r\n                    :   <AddTodo/>\r\n                 }\r\n                <div className={preloader?  `${app.center}` : null}>\r\n                {\r\n                    preloader ?\r\n                        <Preloader/>\r\n                        : todosState.length\r\n                            ?   <TodoList todos={todosState}\r\n                                    checkboxHandler={checkboxHandler}\r\n                                    removeTodoItem={removeTodoItem}\r\n                                />\r\n                            : <p>Not any todo, please add an todo</p>\r\n\r\n                }\r\n                </div>\r\n\r\n            </div>\r\n        </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}